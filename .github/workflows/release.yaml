name: Release

on:
  push:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: write
      packages: write

    outputs:
      version: ${{ steps.version.outputs.version }}
      created: ${{ steps.version.outputs.created }}

    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate version number
      id: version
      run: |
        # Get the latest tag, default to 0 if no tags exist
        LATEST_TAG=$(git tag -l --sort=-version:refname | head -n1 || echo "0")
        if [ -z "$LATEST_TAG" ] || [ "$LATEST_TAG" = "0" ]; then
          NEW_VERSION="1"
        else
          NEW_VERSION=$((LATEST_TAG + 1))
        fi
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
        echo "New version: $NEW_VERSION"

    - name: Create and push tag
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag ${{ steps.version.outputs.version }}
        git push origin ${{ steps.version.outputs.version }}

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: release
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=${{ needs.release.outputs.version }}
          type=raw,value=latest

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-binaries:
    name: Build Release Binaries
    runs-on: ubuntu-latest
    needs: release

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.24.x

    - name: Build release binaries
      run: |
        mkdir -p dist
        
        # Define build targets
        declare -A targets=(
          ["linux/amd64"]="regard-linux-amd64"
          ["linux/arm64"]="regard-linux-arm64"  
          ["linux/arm"]="regard-linux-arm"
          ["darwin/amd64"]="regard-darwin-amd64"
          ["darwin/arm64"]="regard-darwin-arm64"
          ["windows/amd64"]="regard-windows-amd64.exe"
          ["windows/arm64"]="regard-windows-arm64.exe"
        )
        
        # Build for each target
        for target in "${!targets[@]}"; do
          IFS='/' read -r GOOS GOARCH <<< "$target"
          output="dist/${targets[$target]}"
          
          echo "Building for $GOOS/$GOARCH -> $output"
          
          GOOS=$GOOS GOARCH=$GOARCH go build \
            -ldflags "-s -w -X main.version=${{ needs.release.outputs.version }}" \
            -o "$output" \
            cmd/regard/main.go
          
          # Verify binary was created
          if [ ! -f "$output" ]; then
            echo "Failed to build for $GOOS/$GOARCH"
            exit 1
          fi
        done
        
        # Create checksums
        cd dist
        sha256sum * > checksums.txt
        
        # Display what we built
        echo "Built binaries:"
        ls -la

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-binaries
        path: dist/
        retention-days: 1

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [release, docker, build-binaries]

    permissions:
      contents: write

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-binaries
        path: dist/

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.release.outputs.version }}
        name: ${{ needs.release.outputs.version }}
        body: |
          ### Docker
          ```bash
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.release.outputs.version }}
          ```
          ## Docker Images
          - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.release.outputs.version }}`
          - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest`
        files: |
          dist/*
        draft: false
        prerelease: false
